import groovy.text.GStringTemplateEngine

plugins {
    id "org.hidetake.ssh" version "2.10.1"
}

remotes {
    webServer {
        host = project.property('REMOTE_URL')
        user = project.property('REMOTE_SERVER.USER')
        password = project.property('REMOTE_SERVER.PASSWORD')
    }
}


task runProductionLocally(type: Exec) {
    dependsOn(':01 - GUI:buildLocalDockerImageForLocalRunning')
    dependsOn(':02 - serviceCalculator:buildLocalDockerImage')
    dependsOn('generateActualDockerComposeYamlForLocalRunning')

    doFirst {
        println "Run project by docker-compose:"
        commandLine 'cmd', '/c', 'docker-compose up'
    }
}

task deleteDockerComposeYaml {
    doFirst {
        def envProdFile = new File(projectDir.toString() + "\\" + 'Docker-compose.yml')
        if (envProdFile.exists()) {
            envProdFile.delete()
            println "File 'Docker-compose.yml' deleted"
        } else {
            println "File 'Docker-compose.yml' doesn't exist"
        }
    }
}

task generateActualDockerComposeYamlForLocalRunning {
    dependsOn(deleteDockerComposeYaml)

    doFirst {
        def binding = [
                guiImageName       : project.property('GUI.DOCKER_IMAGE_NAME') + ":" + project.property('BUILD_VERSION'),
                guiPort            : project.property('GUI.LOCAL_PORT'),
                calculatorImageName: project.property('SERVICE_CALCULATOR.DOCKER_IMAGE_NAME') + ":" + project.property('BUILD_VERSION'),
                calculatorPort     : project.property('SERVICE_CALCULATOR.LOCAL_PORT')
        ]

        def DockerComposeYmlTemplateFile = new File(projectDir.toString() + "\\" + 'Docker-compose.yml.template')
        def engine = new GStringTemplateEngine()
        def template = engine.createTemplate(DockerComposeYmlTemplateFile).make(binding)
        def DockerComposeYmlFile = new File(projectDir.toString() + "\\" + 'Docker-compose.yml')
        DockerComposeYmlFile.write(template.toString())
        println "Created file 'Docker-compose.yml'"
    }
}

task generateActualDockerComposeYamlForRemoteRunning {
    dependsOn('pushDockerImageIntoRemoteServer')

    doFirst {
        def binding = [
                guiImageName       : project.property('GUI.DOCKER_IMAGE_NAME') + ":" + project.property('BUILD_VERSION'),
                guiPort            : project.property('GUI.REMOTE_PORT'),
                calculatorImageName: project.property('SERVICE_CALCULATOR.DOCKER_IMAGE_NAME') + ":" + project.property('BUILD_VERSION'),
                calculatorPort     : project.property('SERVICE_CALCULATOR.REMOTE_PORT')
        ]

        def DockerComposeYmlTemplateFile = new File(projectDir.toString() + "\\" + 'Docker-compose.yml.template')
        def engine = new GStringTemplateEngine()
        def template = engine.createTemplate(DockerComposeYmlTemplateFile).make(binding)
        def DockerComposeYmlFile = new File(projectDir.toString() + "\\" + 'Docker-compose.yml')
        DockerComposeYmlFile.write(template.toString())
        println "Created file 'Docker-compose.yml'"
    }
}

task copyDockerComposeFileAtRemoteServer {
    dependsOn(generateActualDockerComposeYamlForRemoteRunning)

    doLast {
        ssh.run {
            session(remotes.webServer) {
                put from: file('Docker-compose.yml'), into: '/'
            }
        }
    }
}

task installDockerComposeAtRemoteServer {
    dependsOn(copyDockerComposeFileAtRemoteServer)

    doLast {
        ssh.run {
            session(remotes.webServer) {
                execute 'sudo apt-get update'
                execute 'sudo apt-get install apt-transport-https ca-certificates curl ' +
                        'gnupg-agent software-properties-common'
                execute 'curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -'
                execute 'sudo apt-key fingerprint 0EBFCD88'
                execute 'sudo add-apt-repository deb [arch=amd64] ' +
                        'https://download.docker.com/linux/ubuntu' +
                        '$(lsb_release -cs) stable'
                execute 'sudo apt-get update'
                execute 'sudo apt-get install docker-ce docker-ce-cli containerd.io'
                execute 'docker --version'
                execute 'sudo curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose'
                execute 'sudo chmod +x /usr/local/bin/docker-compose'
                execute 'docker-compose --version'
            }
        }
    }
}

task copyConfigFolder {
    dependsOn(installDockerComposeAtRemoteServer)

    doLast {
        ssh.run {
            session(remotes.webServer) {
                execute 'mkdir config'
                put from: file('config/PropertiesForLdProject.xml'), into: '/config'
            }
        }
    }
}

task runProductionAtRemoteServer() {
    dependsOn(copyConfigFolder)

    doLast {
        ssh.run {
            session(remotes.webServer) {
                execute 'docker-compose up'
            }
        }
    }
}

task runDevelopLocally() {
//    findProject('01 - GUI').
}

task changeRunningContainer_Gui() {

}

task changeRunningContainer_ServiceCalculator() {

}

